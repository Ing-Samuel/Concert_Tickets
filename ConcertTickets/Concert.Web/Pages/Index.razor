@page "/"
@using Concert.Shared.Entities
@using Concert.WEB.Repositories
@using Concert.Web.Repositories;
@using System.Net;
@using System.Net.Http.Json
@using CurrieTechnologies.Razor.SweetAlert2;
@inject SweetAlertService sweetAlertService
@inject IRepository repository
@inject IJSRuntime jsRuntime




<PageTitle>Index</PageTitle>

<input type="number" @bind-value="Id" disabled="@campoBloqueado"/>
<button @onclick="SearchTicked">Buscar</button>

@if (ticketEncontrado != null)
{
    <h2>Ticket Encontrado:</h2>
    <p>ID: @ticketEncontrado.Id</p>
    <p>Fecha de Uso: @ticketEncontrado.UseDate</p>
    <p>Entrada en: @ticketEncontrado.EntrySite</p>
}


@code {
    public Ticket? ticketEncontrado { get; set; }
    public int Id { get; set; }
    private bool campoBloqueado;


    protected async Task SearchTicked()
    {
        var responseHttp = await repository.Get<Ticket>($"/api/tickets/{Id}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        ticketEncontrado = responseHttp.Response;

        if(ticketEncontrado!.Used == true)
        {
            //Funcion que se llama si el Tiquete Existe y Fue Usado
        }

        //Aqui Funcion a llamar si El Tiquete Exite pero, aún no ha sido Registrado
        campoBloqueado = true;
    }

    bool showModal = false;

    public async Task ShowModal()
    {
        showModal = true;
        await jsRuntime.InvokeAsync<object>("$('#myModal').modal", "show");
    }

}
